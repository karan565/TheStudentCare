# Generated by Django 3.2.9 on 2022-03-17 22:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='customuser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('auserid', models.AutoField(primary_key=True, serialize=False)),
                ('mname', models.CharField(max_length=50)),
                ('dob', models.DateField()),
                ('gender', models.CharField(max_length=50)),
                ('altemailid', models.CharField(max_length=50)),
                ('contact', models.IntegerField()),
                ('altcontact', models.IntegerField()),
                ('paddressline1', models.CharField(max_length=50)),
                ('paddressline2', models.CharField(max_length=50)),
                ('plandmark', models.CharField(max_length=50)),
                ('ppincode', models.IntegerField()),
                ('caddressline1', models.CharField(max_length=50)),
                ('caddressline2', models.CharField(max_length=50)),
                ('clandmark', models.CharField(max_length=50)),
                ('cpincode', models.IntegerField()),
                ('usertype', models.CharField(choices=[('1', 'Admin'), ('2', 'Faculty'), ('3', 'Student')], default=3, max_length=50)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='adminsmsm',
            fields=[
                ('smsid', models.AutoField(primary_key=True, serialize=False)),
                ('smsdate', models.DateField()),
                ('smscontent', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='assignmentm',
            fields=[
                ('assignmentid', models.AutoField(primary_key=True, serialize=False)),
                ('subjetname', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='countrym',
            fields=[
                ('countryid', models.AutoField(primary_key=True, serialize=False)),
                ('countryname', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='coursecategorym',
            fields=[
                ('coursecategoryid', models.AutoField(primary_key=True, serialize=False)),
                ('coursetype', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='coursem',
            fields=[
                ('courseid', models.AutoField(primary_key=True, serialize=False)),
                ('coursecode', models.IntegerField()),
                ('coursename', models.CharField(max_length=50)),
                ('coursemaxmarks', models.IntegerField()),
                ('courseminmarks', models.IntegerField()),
                ('coursecategoryid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.coursecategorym')),
            ],
        ),
        migrations.CreateModel(
            name='coursetypem',
            fields=[
                ('coursetypeid', models.AutoField(primary_key=True, serialize=False)),
                ('coursetype', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='crmcomponentm',
            fields=[
                ('crmcomponentid', models.AutoField(primary_key=True, serialize=False)),
                ('crmdate', models.DateTimeField()),
                ('crmsubject', models.CharField(max_length=50)),
                ('voice', models.IntegerField()),
                ('image', models.IntegerField()),
                ('chatbot', models.IntegerField()),
                ('directinquiry', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='examm',
            fields=[
                ('examid', models.AutoField(primary_key=True, serialize=False)),
                ('examname', models.CharField(max_length=50)),
                ('examschedule', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='programm',
            fields=[
                ('programid', models.AutoField(primary_key=True, serialize=False)),
                ('programname', models.CharField(max_length=50)),
                ('programcode', models.IntegerField()),
                ('minduration', models.IntegerField()),
                ('maxduration', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='semesterm',
            fields=[
                ('semesterid', models.AutoField(primary_key=True, serialize=False)),
                ('semestername', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='studentm',
            fields=[
                ('studentid', models.AutoField(primary_key=True, serialize=False)),
                ('enrollnumber', models.IntegerField()),
                ('regionalcentre', models.CharField(max_length=50)),
                ('studentstudycentre', models.CharField(max_length=50)),
                ('medium', models.CharField(max_length=50)),
                ('courseid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.coursem')),
                ('userid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='voicem',
            fields=[
                ('voiceid', models.AutoField(primary_key=True, serialize=False)),
                ('voicefile', models.CharField(max_length=10)),
                ('voicetype', models.CharField(max_length=10)),
                ('resolved', models.BooleanField(default=False)),
                ('remark', models.CharField(max_length=10)),
                ('voicequestiontype', models.CharField(max_length=10)),
                ('crmcomponentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.crmcomponentm')),
            ],
        ),
        migrations.CreateModel(
            name='studentsms',
            fields=[
                ('studentid', models.AutoField(primary_key=True, serialize=False)),
                ('smscontent', models.CharField(max_length=100)),
                ('resolved', models.BooleanField(default=False)),
                ('remark', models.CharField(max_length=10)),
                ('smsquestiontype', models.CharField(max_length=10)),
                ('crmcomponentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.crmcomponentm')),
            ],
        ),
        migrations.CreateModel(
            name='studentprogramt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolldate', models.DateField()),
                ('admissionyear', models.IntegerField()),
                ('admissionvalidtill', models.DateField()),
                ('programid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.programm')),
                ('studentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.studentm')),
            ],
        ),
        migrations.CreateModel(
            name='studentexamt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.examm')),
                ('studentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.studentm')),
            ],
        ),
        migrations.CreateModel(
            name='studentassignmentt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignmentname', models.CharField(max_length=20)),
                ('assignmenfile', models.CharField(max_length=50)),
                ('submssiondate', models.DateField()),
                ('marks', models.IntegerField()),
                ('assignmentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.assignmentm')),
                ('studentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.studentm')),
            ],
        ),
        migrations.CreateModel(
            name='statem',
            fields=[
                ('stateid', models.AutoField(primary_key=True, serialize=False)),
                ('statename', models.CharField(max_length=50)),
                ('countryid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.countrym')),
            ],
        ),
        migrations.CreateModel(
            name='semestercourset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.coursem')),
                ('semesterid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.semesterm')),
            ],
        ),
        migrations.CreateModel(
            name='programsemestert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.programm')),
                ('semesterid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.semesterm')),
            ],
        ),
        migrations.CreateModel(
            name='imagem',
            fields=[
                ('imageid', models.AutoField(primary_key=True, serialize=False)),
                ('imagefile', models.CharField(max_length=10)),
                ('imagetype', models.CharField(max_length=10)),
                ('resolved', models.BooleanField(default=False)),
                ('remark', models.CharField(max_length=10)),
                ('imagequestiontype', models.CharField(max_length=10)),
                ('crmcomponentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.crmcomponentm')),
            ],
        ),
        migrations.CreateModel(
            name='facultym',
            fields=[
                ('facultyid', models.AutoField(primary_key=True, serialize=False)),
                ('facultyname', models.CharField(max_length=50)),
                ('userid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='coursem',
            name='coursetypeid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.coursetypem'),
        ),
        migrations.AddField(
            model_name='coursem',
            name='prrogramid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.programm'),
        ),
        migrations.CreateModel(
            name='courseexamt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.coursem')),
                ('examid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.examm')),
            ],
        ),
        migrations.CreateModel(
            name='citym',
            fields=[
                ('cityid', models.AutoField(primary_key=True, serialize=False)),
                ('cityname', models.CharField(max_length=50)),
                ('stateid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.statem')),
            ],
        ),
        migrations.CreateModel(
            name='chatbotquestionm',
            fields=[
                ('chatbotquestionid', models.AutoField(primary_key=True, serialize=False)),
                ('chatbotquestion', models.CharField(max_length=30)),
                ('chatbotquestiontype', models.CharField(max_length=10)),
                ('crmcomponentid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.crmcomponentm')),
            ],
        ),
        migrations.CreateModel(
            name='chatbotanswer',
            fields=[
                ('chatbotanswerid', models.AutoField(primary_key=True, serialize=False)),
                ('chatbotanswer', models.CharField(max_length=30)),
                ('isrelevent', models.CharField(max_length=3)),
                ('chatbotquestionid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.chatbotquestionm')),
            ],
        ),
        migrations.CreateModel(
            name='adminsmst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smsid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.adminsmsm')),
                ('userid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='ccityid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ccityid', to='home.citym'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='pcityid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pcityid', to='home.citym'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
